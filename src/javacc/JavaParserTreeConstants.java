/* Generated By:JavaCC: Do not edit this line. JavaParserTreeConstants.java Version 5.0 */
package javacc;

public interface JavaParserTreeConstants
{
	public int JJTCOMPILATIONUNIT = 0;
	  public int JJTPACKAGEDECLARATION = 1;
	  public int JJTIMPORTDECLARATION = 2;
	  public int JJTMODIFIERS = 3;
	  public int JJTTYPEDECLARATION = 4;
	  public int JJTCLASSORINTERFACEDECLARATION = 5;
	  public int JJTEXTENDSLIST = 6;
	  public int JJTIMPLEMENTSLIST = 7;
	  public int JJTENUMDECLARATION = 8;
	  public int JJTENUMBODY = 9;
	  public int JJTENUMCONSTANT = 10;
	  public int JJTTYPEPARAMETERS = 11;
	  public int JJTTYPEPARAMETER = 12;
	  public int JJTTYPEBOUND = 13;
	  public int JJTCLASSORINTERFACEBODY = 14;
	  public int JJTCLASSORINTERFACEBODYDECLARATION = 15;
	  public int JJTFIELDDECLARATION = 16;
	  public int JJTVARIABLEDECLARATOR = 17;
	  public int JJTVARIABLEDECLARATORID = 18;
	  public int JJTVARIABLEINITIALIZER = 19;
	  public int JJTARRAYINITIALIZER = 20;
	  public int JJTMETHODDECLARATION = 21;
	  public int JJTMETHODDECLARATOR = 22;
	  public int JJTFORMALPARAMETERS = 23;
	  public int JJTFORMALPARAMETER = 24;
	  public int JJTCONSTRUCTORDECLARATION = 25;
	  public int JJTEXPLICITCONSTRUCTORINVOCATION = 26;
	  public int JJTINITIALIZER = 27;
	  public int JJTTYPE = 28;
	  public int JJTREFERENCETYPE = 29;
	  public int JJTCLASSORINTERFACETYPE = 30;
	  public int JJTTYPEARGUMENTS = 31;
	  public int JJTTYPEARGUMENT = 32;
	  public int JJTWILDCARDBOUNDS = 33;
	  public int JJTPRIMITIVETYPE = 34;
	  public int JJTINTEGERTYPE = 35;
	  public int JJTFLOATINGPOINTTYPE = 36;
	  public int JJTCHARACTERTYPE = 37;
	  public int JJTBOOLEANTYPE = 38;
	  public int JJTRESULTTYPE = 39;
	  public int JJTVOIDTYPE = 40;
	  public int JJTNAME = 41;
	  public int JJTNAMELIST = 42;
	  public int JJTEXPRESSION = 43;
	  public int JJTASSIGNMENTOPERATOR = 44;
	  public int JJTCONDITIONALEXPRESSION = 45;
	  public int JJTCONDITIONALOREXPRESSION = 46;
	  public int JJTCONDITIONALANDEXPRESSION = 47;
	  public int JJTINCLUSIVEOREXPRESSION = 48;
	  public int JJTEXCLUSIVEOREXPRESSION = 49;
	  public int JJTANDEXPRESSION = 50;
	  public int JJTEQUALITYEXPRESSION = 51;
	  public int JJTINSTANCEOFEXPRESSION = 52;
	  public int JJTRELATIONALEXPRESSION = 53;
	  public int JJTSHIFTEXPRESSION = 54;
	  public int JJTADDITIVEEXPRESSION = 55;
	  public int JJTMULTIPLICATIVEEXPRESSION = 56;
	  public int JJTUNARYEXPRESSION = 57;
	  public int JJTPREINCREMENTEXPRESSION = 58;
	  public int JJTPREDECREMENTEXPRESSION = 59;
	  public int JJTUNARYEXPRESSIONNOTPLUSMINUS = 60;
	  public int JJTCASTLOOKAHEAD = 61;
	  public int JJTPOSTFIXEXPRESSION = 62;
	  public int JJTCASTEXPRESSION = 63;
	  public int JJTPRIMARYEXPRESSION = 64;
	  public int JJTMEMBERSELECTOR = 65;
	  public int JJTPRIMARYPREFIX = 66;
	  public int JJTPRIMARYSUFFIX = 67;
	  public int JJTLITERAL = 68;
	  public int JJTINTEGERLITERAL = 69;
	  public int JJTFLOATINGPOINTLITERAL = 70;
	  public int JJTCHARACTERLITERAL = 71;
	  public int JJTSTRINGLITERAL = 72;
	  public int JJTBOOLEANLITERAL = 73;
	  public int JJTNULLLITERAL = 74;
	  public int JJTARGUMENTS = 75;
	  public int JJTARGUMENTLIST = 76;
	  public int JJTALLOCATIONEXPRESSION = 77;
	  public int JJTARRAYDIMSANDINITS = 78;
	  public int JJTSTATEMENT = 79;
	  public int JJTASSERTSTATEMENT = 80;
	  public int JJTLABELEDSTATEMENT = 81;
	  public int JJTBLOCK = 82;
	  public int JJTSWITCHLABELBLOCK = 83;
	  public int JJTSTATEMENTBLOCK = 84;
	  public int JJTBLOCKSTATEMENT = 85;
	  public int JJTLOCALVARIABLEDECLARATION = 86;
	  public int JJTEMPTYSTATEMENT = 87;
	  public int JJTSTATEMENTEXPRESSION = 88;
	  public int JJTSWITCHSTATEMENT = 89;
	  public int JJTSWITCHLABEL = 90;
	  public int JJTIFSTATEMENT = 91;
	  public int JJTWHILESTATEMENT = 92;
	  public int JJTDOSTATEMENT = 93;
	  public int JJTFORSTATEMENT = 94;
	  public int JJTFORINIT = 95;
	  public int JJTSTATEMENTEXPRESSIONLIST = 96;
	  public int JJTFORUPDATE = 97;
	  public int JJTBREAKSTATEMENT = 98;
	  public int JJTCONTINUESTATEMENT = 99;
	  public int JJTRETURNSTATEMENT = 100;
	  public int JJTTHROWSTATEMENT = 101;
	  public int JJTSYNCHRONIZEDSTATEMENT = 102;
	  public int JJTTRYSTATEMENT = 103;
	  public int JJTRUNSIGNEDSHIFT = 104;
	  public int JJTRSIGNEDSHIFT = 105;
	  public int JJTANNOTATION = 106;
	  public int JJTNORMALANNOTATION = 107;
	  public int JJTMARKERANNOTATION = 108;
	  public int JJTSINGLEMEMBERANNOTATION = 109;
	  public int JJTMEMBERVALUEPAIRS = 110;
	  public int JJTMEMBERVALUEPAIR = 111;
	  public int JJTMEMBERVALUE = 112;
	  public int JJTMEMBERVALUEARRAYINITIALIZER = 113;
	  public int JJTANNOTATIONTYPEDECLARATION = 114;
	  public int JJTANNOTATIONTYPEBODY = 115;
	  public int JJTANNOTATIONTYPEMEMBERDECLARATION = 116;
	  public int JJTDEFAULTVALUE = 117;


	  public String[] jjtNodeName = {
	    "CompilationUnit",
	    "PackageDeclaration",
	    "ImportDeclaration",
	    "Modifiers",
	    "TypeDeclaration",
	    "ClassOrInterfaceDeclaration",
	    "ExtendsList",
	    "ImplementsList",
	    "EnumDeclaration",
	    "EnumBody",
	    "EnumConstant",
	    "TypeParameters",
	    "TypeParameter",
	    "TypeBound",
	    "ClassOrInterfaceBody",
	    "ClassOrInterfaceBodyDeclaration",
	    "FieldDeclaration",
	    "VariableDeclarator",
	    "VariableDeclaratorId",
	    "VariableInitializer",
	    "ArrayInitializer",
	    "MethodDeclaration",
	    "MethodDeclarator",
	    "FormalParameters",
	    "FormalParameter",
	    "ConstructorDeclaration",
	    "ExplicitConstructorInvocation",
	    "Initializer",
	    "Type",
	    "ReferenceType",
	    "ClassOrInterfaceType",
	    "TypeArguments",
	    "TypeArgument",
	    "WildcardBounds",
	    "PrimitiveType",
	    "IntegerType",
	    "FloatingPointType",
	    "CharacterType",
	    "BooleanType",
	    "ResultType",
	    "VoidType",
	    "Name",
	    "NameList",
	    "Expression",
	    "AssignmentOperator",
	    "ConditionalExpression",
	    "ConditionalOrExpression",
	    "ConditionalAndExpression",
	    "InclusiveOrExpression",
	    "ExclusiveOrExpression",
	    "AndExpression",
	    "EqualityExpression",
	    "InstanceOfExpression",
	    "RelationalExpression",
	    "ShiftExpression",
	    "AdditiveExpression",
	    "MultiplicativeExpression",
	    "UnaryExpression",
	    "PreIncrementExpression",
	    "PreDecrementExpression",
	    "UnaryExpressionNotPlusMinus",
	    "CastLookahead",
	    "PostfixExpression",
	    "CastExpression",
	    "PrimaryExpression",
	    "MemberSelector",
	    "PrimaryPrefix",
	    "PrimarySuffix",
	    "Literal",
	    "IntegerLiteral",
	    "FloatingPointLiteral",
	    "CharacterLiteral",
	    "StringLiteral",
	    "BooleanLiteral",
	    "NullLiteral",
	    "Arguments",
	    "ArgumentList",
	    "AllocationExpression",
	    "ArrayDimsAndInits",
	    "Statement",
	    "AssertStatement",
	    "LabeledStatement",
	    "Block",
	    "SwitchLabelBlock",
	    "StatementBlock",
	    "BlockStatement",
	    "LocalVariableDeclaration",
	    "EmptyStatement",
	    "StatementExpression",
	    "SwitchStatement",
	    "SwitchLabel",
	    "IfStatement",
	    "WhileStatement",
	    "DoStatement",
	    "ForStatement",
	    "ForInit",
	    "StatementExpressionList",
	    "ForUpdate",
	    "BreakStatement",
	    "ContinueStatement",
	    "ReturnStatement",
	    "ThrowStatement",
	    "SynchronizedStatement",
	    "TryStatement",
	    "RUNSIGNEDSHIFT",
	    "RSIGNEDSHIFT",
	    "Annotation",
	    "NormalAnnotation",
	    "MarkerAnnotation",
	    "SingleMemberAnnotation",
	    "MemberValuePairs",
	    "MemberValuePair",
	    "MemberValue",
	    "MemberValueArrayInitializer",
	    "AnnotationTypeDeclaration",
	    "AnnotationTypeBody",
	    "AnnotationTypeMemberDeclaration",
	    "DefaultValue",
	  };
}