/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package javacc;

import java.util.ArrayList;

public class SimpleNode implements Node {

	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Object value;
	protected JavaParser parser;
	protected int subTreeSize = 0;
	public int childNr = -1;
	public boolean matched = false;
	public boolean checked = false;
	public String m_text = null;

	public void setText(String text) {
		m_text = text;
	}

	public SimpleNode(int i) {
		id = i;
	}

	public SimpleNode(JavaParser p, int i) throws ParseException {
		this(i);
		parser = p;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) {
		parent = n;
	}

	public Node jjtGetParent() {
		return parent;
	}

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	// Remove unnecessary nodes from comparison
	public SimpleNode reduceTreeSize() {
		// Check that the node has children
		if (children != null) {
			// If the node has 2 or more children then we will not collapse this
			// node.
			if (children.length >= 2) {

				for (int i = 0; i < children.length; i++) {
					children[i] = ((SimpleNode) children[i]).reduceTreeSize();
				}
			}
			// The node has only one child.
			else {
				// There are some nodes that we do not collapse
				if (this.id == JavaParserTreeConstants.JJTBLOCK
						|| this.id == JavaParserTreeConstants.JJTCLASSORINTERFACEDECLARATION
						|| this.id == JavaParserTreeConstants.JJTMETHODDECLARATOR
						|| this.id == JavaParserTreeConstants.JJTCLASSORINTERFACEBODY
						|| this.id == JavaParserTreeConstants.JJTSWITCHLABELBLOCK
						|| this.id == JavaParserTreeConstants.JJTSTATEMENTBLOCK) {

					children[0] = ((SimpleNode) children[0]).reduceTreeSize();
				}
				// Collapse nodes.
				else {
					return ((SimpleNode) children[0]).reduceTreeSize();
				}
			}
		}
		return this;
	}

	public boolean isLeaf() {
		if (jjtGetNumChildren() == 0) {
			return true;
		} else {
			return false;
		}
	}

	public int numOfChildren() {
		return jjtGetNumChildren();
	}

	public SimpleNode[] getChildren() {
		if (children == null) {
			return null;
		}

		SimpleNode tmp[] = new SimpleNode[numOfChildren()];
		System.arraycopy(children, 0, tmp, 0, numOfChildren());

		return tmp;
	}

	public void preorderTraversal(ArrayList<SimpleNode> list) {
		list.add(this);
		if (list == null || children == null) {
			return;
		} else {
			for (int i = 0; i < children.length; i++) {
				((SimpleNode) children[i]).preorderTraversal(list);
			}
		}
	}

	public void setMatched() {
		matched = true;
	}

	public int sizeSubtree() {
		subTreeSize = 1;
		if (children != null) {
			for (int i = 0; i < children.length; i++) {
				((SimpleNode) children[i]).childNr = i;
				((SimpleNode) children[i]).jjtSetParent(this);
				subTreeSize += ((SimpleNode) children[i]).sizeSubtree();
			}

		}
		return subTreeSize;
	}

	public void jjtSetValue(Object value) {
		this.value = value;
	}

	public Object jjtGetValue() {
		return value;
	}

	/*
	 * You can override these two methods in subclasses of SimpleNode to
	 * customize the way the node appears when the tree is dumped. If your
	 * output uses more than one line you should override toString(String),
	 * otherwise overriding toString() is probably all you need to do.
	 */

	public String toString() {
		return JavaParserTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix) {
		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */

	public void dump(String prefix) {
		System.out.println(toString(prefix));
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		}
	}

	public int getId() {
		return id;
	}

	public SimpleNode getParent() {
		return (SimpleNode) this.jjtGetParent();
	}

	public int getSize() {
		return subTreeSize;
	}

}

